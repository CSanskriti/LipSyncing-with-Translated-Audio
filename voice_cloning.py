# -*- coding: utf-8 -*-
"""Voice Cloning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zm6B_nqMeOKW1JtkXzvUegJGsHYkY6Zs
"""

import torch
from TTS.api import TTS
from IPython.display import Audio

def clone_voice(text_path, speaker_wav_path, language, tts_output_path, vc_output_path):
    """
    Clones a voice from a given text and speaker's audio file using TTS and saves the output.

    Parameters:
    text_path (str): The path to the text file containing the text to be synthesized.
    speaker_wav_path (str): The path to the speaker's audio file.
    language (str): The language code of the text.
    tts_output_path (str): The path where the TTS synthesized audio will be saved.
    vc_output_path (str): The path where the voice converted audio will be saved.
    """
    # Get device
    device = "cuda" if torch.cuda.is_available() else "cpu"

    # Read the text from file
    with open(text_path, "r") as f:
        text = f.read()

    # Init TTS with the multilingual voice cloning model
    tts = TTS(model_name="tts_models/multilingual/multi-dataset/your_tts", progress_bar=False).to(device)

    # Run TTS and save output to a file
    tts.tts_to_file(text=text, speaker_wav=speaker_wav_path, language=language, file_path=tts_output_path)

    # If you want to use the voice conversion model, initialize it like this:
    tts_vc = TTS(model_name="voice_conversion_models/multilingual/vctk/freevc24", progress_bar=False).to(device)

    # Run voice conversion and save output to a file
    tts_vc.voice_conversion_to_file(source_wav=speaker_wav_path, target_wav=speaker_wav_path, file_path=vc_output_path)

    # Return paths to the output audio files
    return tts_output_path, vc_output_path