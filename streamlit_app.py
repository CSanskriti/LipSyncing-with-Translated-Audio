# -*- coding: utf-8 -*-
"""streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zm6B_nqMeOKW1JtkXzvUegJGsHYkY6Zs
"""

import os
import streamlit as st
from audio_extraction import extract_audio_from_video
from audio_enhancement import enhance_audio
from audio_translation import translate_audio
from voice_cloning import clone_voice
from lipsyncing import run_lipsyncing

# Set up paths for Kaggle environment
INPUT_DIR = "../input"  # Assuming input data is in this directory on Kaggle
OUTPUT_DIR = "./output"  # Output directory for saving results

# Ensure output directory exists
if not os.path.exists(OUTPUT_DIR):
    os.makedirs(OUTPUT_DIR)

# Streamlit UI
def main():
    st.title("LipSyncing with Translated Audio")

    st.header("Upload Video")
    uploaded_file = st.file_uploader("Choose a video file", type=["mp4", "mov"])

    if uploaded_file:
        video_path = os.path.join(INPUT_DIR, uploaded_file.name)
        with open(video_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        st.success(f"Video uploaded successfully: {video_path}")

        # Step 1: Audio Extraction
        st.header("Step 1: Extracting Audio from Video")
        audio_path = os.path.join(OUTPUT_DIR, "audio.mp3")
        extract_audio_from_video(video_path, audio_path)
        st.success("Audio extraction complete.")

        # Step 2: Audio Enhancement
        st.header("Step 2: Enhancing Audio")
        enhanced_audio_path = os.path.join(OUTPUT_DIR, "enhanced_audio.wav")
        enhance_audio(audio_path, enhanced_audio_path)
        st.success("Audio enhancement complete.")

        # Step 3: Audio Translation
        st.header("Step 3: Translating Audio")
        target_languages = ["hi","en"]  # Example target languages
        translations = translate_audio(enhanced_audio_path, target_languages)
        st.write("Translations:")
        for lang, info in translations.items():
            st.write(f"Language: {lang}, Text: {info['text']}, Audio: {info['audio_path']}")
        st.success("Audio translation complete.")

        # Step 4: Voice Cloning
        st.header("Step 4: Cloning Voice")
        text_path = os.path.join(OUTPUT_DIR, "text.txt")  # Path to text file
        with open(text_path, "w") as f:
            f.write("Hello, this is a sample text for voice cloning.")  # Example text
        speaker_wav_path = os.path.join(OUTPUT_DIR, "speaker_audio.wav")  # Path to speaker's audio file
        language = "en"  # Language code
        tts_output_path = os.path.join(OUTPUT_DIR, "tts_output.wav")
        vc_output_path = os.path.join(OUTPUT_DIR, "vc_output.wav")
        tts_path, vc_path = clone_voice(text_path, speaker_wav_path, language, tts_output_path, vc_output_path)
        st.success("Voice cloning complete.")

        # Step 5: LipSyncing
        st.header("Step 5: LipSyncing")
        output_video_path = os.path.join(OUTPUT_DIR, "output_video.mp4")
        run_lipsyncing(video_path, tts_output_path, output_video_path)
        st.success("LipSyncing complete.")

        # Display final output video to user
        st.header("Final Output Video")
        st.video(output_video_path)

if __name__ == "__main__":
    main()