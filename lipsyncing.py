# -*- coding: utf-8 -*-
"""lipsyncing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zm6B_nqMeOKW1JtkXzvUegJGsHYkY6Zs
"""

import os
import subprocess
from IPython.display import HTML
from base64 import b64encode
import ffmpeg

def clone_wav2lip_repo(repo_url="https://github.com/zabique/Wav2Lip", clone_path="/kaggle/working/Wav2Lip"):
    """
    Clone the Wav2Lip repository.

    Parameters:
    repo_url (str): URL of the repository.
    clone_path (str): Path where the repository will be cloned.
    """
    if not os.path.exists(clone_path):
        subprocess.run(["git", "clone", repo_url, clone_path], check=True)
    else:
        print("Wav2Lip repository already cloned.")

def download_pretrained_model(model_url, save_path):
    """
    Download the pretrained Wav2Lip model.

    Parameters:
    model_url (str): URL of the pretrained model.
    save_path (str): Path where the model will be saved.
    """
    subprocess.run(["wget", model_url, "-O", save_path], check=True)

def install_requirements(requirements_path="/kaggle/working/Wav2Lip/requirements.txt"):
    """
    Install the required packages from the requirements file.

    Parameters:
    requirements_path (str): Path to the requirements file.
    """
    subprocess.run(["pip", "install", "-r", requirements_path], check=True)

def download_face_detection_model(model_url, save_path):
    """
    Download the pretrained model for face detection.

    Parameters:
    model_url (str): URL of the pretrained face detection model.
    save_path (str): Path where the model will be saved.
    """
    subprocess.run(["wget", model_url, "-O", save_path], check=True)

def install_dependencies():
    """
    Install necessary dependencies for the project.
    """
    subprocess.run(["pip", "install", "-q", "youtube-dl"], check=True)
    subprocess.run(["pip", "install", "ffmpeg-python"], check=True)
    subprocess.run(["pip", "install", "librosa==0.9.1"], check=True)

def generate_lip_sync_video(checkpoint_path, face_video_path, audio_path, output_path):
    """
    Generate a lip-sync video using Wav2Lip.

    Parameters:
    checkpoint_path (str): Path to the Wav2Lip checkpoint.
    face_video_path (str): Path to the input face video.
    audio_path (str): Path to the input audio file.
    output_path (str): Path where the output video will be saved.
    """
    subprocess.run([
        "python", "inference.py",
        "--checkpoint_path", checkpoint_path,
        "--face", face_video_path,
        "--audio", audio_path,
        "--outfile", output_path
    ], check=True, cwd="/kaggle/working/Wav2Lip")

def display_video(video_path):
    """
    Display a video in the notebook.

    Parameters:
    video_path (str): Path to the video file.
    """
    with open(video_path, 'rb') as video_file:
        mp4 = video_file.read()
    data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
    return HTML(f"""
    <video width="50%" height="90%" controls>
          <source src="{data_url}" type="video/mp4">
    </video>""")

def main():
    # Define paths and URLs
    repo_url = "https://github.com/zabique/Wav2Lip"
    clone_path = "/kaggle/working/Wav2Lip"
    model_url = 'https://iiitaphyd-my.sharepoint.com/personal/radrabha_m_research_iiit_ac_in/_layouts/15/download.aspx?share=EdjI7bZlgApMqsVoEUUXpLsBxqXbn5z8VTmoxp55YNDcIA'
    model_save_path = '/kaggle/working/Wav2Lip/checkpoints/wav2lip_gan.pth'
    face_model_url = "https://www.adrianbulat.com/downloads/python-fan/s3fd-619a316812.pth"
    face_model_save_path = "/kaggle/working/Wav2Lip/face_detection/detection/sfd/s3fd.pth"
    checkpoint_path = 'checkpoints/wav2lip_gan.pth'
    face_video_path = "/kaggle/input/video-data/Original_recording5.mp4"
    audio_path = "/kaggle/working/converted_output.wav"
    output_path = "results/result.mp4"

    # Clone repository
    clone_wav2lip_repo(repo_url, clone_path)

    # Download pretrained models
    download_pretrained_model(model_url, model_save_path)
    download_face_detection_model(face_model_url, face_model_save_path)

    # Install requirements
    install_requirements()

    # Install additional dependencies
    install_dependencies()

    # Generate lip-sync video
    generate_lip_sync_video(checkpoint_path, face_video_path, audio_path, output_path)

    # Display the result video
    display_video(output_path)

if __name__ == "__main__":
    main()